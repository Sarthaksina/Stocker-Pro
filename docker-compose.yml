version: '3.8'

services:
  # API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: stocker-pro-api:latest
    container_name: stocker-pro-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - STOCKER_ENVIRONMENT=production
      - STOCKER_LOG_LEVEL=info
      - STOCKER_API_HOST=0.0.0.0
      - STOCKER_API_PORT=8000
      - STOCKER_API_WORKERS=4
      - STOCKER_SECURITY_SECRET_KEY=${STOCKER_SECURITY_SECRET_KEY}
      - STOCKER_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - db
      - redis
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database service
  db:
    image: postgres:14-alpine
    container_name: stocker-pro-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-stocker}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-stockerpassword}
      - POSTGRES_DB=${POSTGRES_DB:-stocker_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stocker"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: stocker-pro-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: stocker-pro-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - stocker-network
    depends_on:
      - api

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: stocker-pro-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - stocker-network
    depends_on:
      - prometheus

networks:
  stocker-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
