name: STOCKER Pro CD

on:
  workflow_run:
    workflows: ["STOCKER Pro CI"]
    branches: [main, develop]
    types:
      - completed
  release:
    types: [published]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' && 
      github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.head_branch == 'develop'
    
    environment:
      name: staging
      url: https://staging-api.stockerpro.com
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.0'
    
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Update Kubernetes secrets
      run: |
        # Create a temporary secrets file
        cat <<EOF > secrets.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: stocker-secrets
          namespace: stocker-staging
        type: Opaque
        stringData:
          security-secret-key: "${{ secrets.SECURITY_SECRET_KEY }}"
          database-url: "${{ secrets.DATABASE_URL }}"
          redis-url: "${{ secrets.REDIS_URL }}"
          alpha-vantage-api-key: "${{ secrets.ALPHA_VANTAGE_API_KEY }}"
          postgres-user: "${{ secrets.POSTGRES_USER }}"
          postgres-password: "${{ secrets.POSTGRES_PASSWORD }}"
          postgres-db: "${{ secrets.POSTGRES_DB }}"
        EOF
        
        # Apply the secrets
        kubectl apply -f secrets.yaml
        
        # Remove the temporary file
        rm secrets.yaml
    
    - name: Deploy to staging
      run: |
        # Update the image tag in the deployment
        kubectl set image deployment/stocker-api stocker-api=ghcr.io/${{ github.repository }}/stocker-pro-api:develop -n stocker-staging
        
        # Verify the deployment
        kubectl rollout status deployment/stocker-api -n stocker-staging --timeout=300s
    
    - name: Notify deployment status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_TITLE: Staging Deployment
        SLACK_MESSAGE: 'Staging deployment ${{ job.status }}'
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}

  deploy-production:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && 
       github.event.workflow_run.conclusion == 'success' && 
       github.event.workflow_run.head_branch == 'main') || 
      github.event_name == 'release'
    
    environment:
      name: production
      url: https://api.stockerpro.com
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.0'
    
    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Update Kubernetes secrets
      run: |
        # Create a temporary secrets file
        cat <<EOF > secrets.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: stocker-secrets
          namespace: stocker-production
        type: Opaque
        stringData:
          security-secret-key: "${{ secrets.SECURITY_SECRET_KEY }}"
          database-url: "${{ secrets.DATABASE_URL }}"
          redis-url: "${{ secrets.REDIS_URL }}"
          alpha-vantage-api-key: "${{ secrets.ALPHA_VANTAGE_API_KEY }}"
          postgres-user: "${{ secrets.POSTGRES_USER }}"
          postgres-password: "${{ secrets.POSTGRES_PASSWORD }}"
          postgres-db: "${{ secrets.POSTGRES_DB }}"
        EOF
        
        # Apply the secrets
        kubectl apply -f secrets.yaml
        
        # Remove the temporary file
        rm secrets.yaml
    
    - name: Deploy to production
      run: |
        # Determine the image tag
        if [ "${{ github.event_name }}" == "release" ]; then
          TAG="${{ github.event.release.tag_name }}"
        else
          TAG="main"
        fi
        
        # Update the image tag in the deployment
        kubectl set image deployment/stocker-api stocker-api=ghcr.io/${{ github.repository }}/stocker-pro-api:$TAG -n stocker-production
        
        # Verify the deployment
        kubectl rollout status deployment/stocker-api -n stocker-production --timeout=300s
    
    - name: Notify deployment status
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_TITLE: Production Deployment
        SLACK_MESSAGE: 'Production deployment ${{ job.status }}'
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
